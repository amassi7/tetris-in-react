{"ast":null,"code":"import _objectSpread from \"/root/codebase/tetris-in-react/tetris/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { isWithinBoard, hasCollision } from \"./Board\";\nimport { rotate } from \"./Tetrominoes\";\nimport { Action } from \"./Input\";\nvar attemptRotation = function attemptRotation(_ref) {\n  var board = _ref.board,\n    player = _ref.player,\n    setPlayer = _ref.setPlayer;\n  var shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1\n  });\n  var position = player.position;\n  var isValidRotation = isWithinBoard({\n    board: board,\n    position: position,\n    shape: shape\n  }) && !hasCollision({\n    board: board,\n    position: position,\n    shape: shape\n  });\n  if (isValidRotation) {\n    setPlayer(_objectSpread(_objectSpread({}, player), {}, {\n      tetromino: _objectSpread(_objectSpread({}, player.tetromino), {}, {\n        shape: shape\n      })\n    }));\n  } else {\n    return false;\n  }\n};\nexport var movePlayer = function movePlayer(_ref2) {\n  var delta = _ref2.delta,\n    position = _ref2.position,\n    shape = _ref2.shape,\n    board = _ref2.board;\n  var desiredNextPosition = {\n    row: position.row + delta.row,\n    column: position.column + delta.column\n  };\n  var collided = hasCollision({\n    board: board,\n    position: desiredNextPosition,\n    shape: shape\n  });\n  var isOnBoard = isWithinBoard({\n    board: board,\n    position: desiredNextPosition,\n    shape: shape\n  });\n  var preventMove = !isOnBoard || isOnBoard && collided;\n  var nextPosition = preventMove ? position : desiredNextPosition;\n  var isMovingDown = delta.row > 0;\n  var isHit = isMovingDown && (collided || !isOnBoard);\n  return {\n    collided: isHit,\n    nextPosition: nextPosition\n  };\n};\nvar attemptMovement = function attemptMovement(_ref3) {\n  var board = _ref3.board,\n    action = _ref3.action,\n    player = _ref3.player,\n    setPlayer = _ref3.setPlayer,\n    setGameOver = _ref3.setGameOver;\n  var delta = {\n    row: 0,\n    column: 0\n  };\n  var isFastDropping = false;\n  if (action === Action.FastDrop) {\n    isFastDropping = true;\n  } else if (action === Action.SlowDrop) {\n    delta.row += 1;\n  } else if (action === Action.Left) {\n    delta.column -= 1;\n  } else if (action === Action.Right) {\n    delta.column += 1;\n  }\n  var _movePlayer = movePlayer({\n      delta: delta,\n      position: player.position,\n      shape: player.tetromino.shape,\n      board: board\n    }),\n    collided = _movePlayer.collided,\n    nextPosition = _movePlayer.nextPosition;\n  var isGameOver = collided && player.position.row === 0;\n  if (isGameOver) {\n    setGameOver(isGameOver);\n  }\n  setPlayer(_objectSpread(_objectSpread({}, player), {}, {\n    collided: collided,\n    isFastDropping: isFastDropping,\n    position: nextPosition\n  }));\n};\nexport var playerController = function playerController(_ref4) {\n  var action = _ref4.action,\n    board = _ref4.board,\n    player = _ref4.player,\n    setPlayer = _ref4.setPlayer,\n    setGameOver = _ref4.setGameOver;\n  if (!action) return;\n  if (action === Action.Rotate) {\n    attemptRotation({\n      board: board,\n      player: player,\n      setPlayer: setPlayer\n    });\n  } else {\n    attemptMovement({\n      board: board,\n      player: player,\n      setPlayer: setPlayer,\n      action: action,\n      setGameOver: setGameOver\n    });\n  }\n};","map":{"version":3,"names":["isWithinBoard","hasCollision","rotate","Action","attemptRotation","_ref","board","player","setPlayer","shape","piece","tetromino","direction","position","isValidRotation","_objectSpread","movePlayer","_ref2","delta","desiredNextPosition","row","column","collided","isOnBoard","preventMove","nextPosition","isMovingDown","isHit","attemptMovement","_ref3","action","setGameOver","isFastDropping","FastDrop","SlowDrop","Left","Right","_movePlayer","isGameOver","playerController","_ref4","Rotate"],"sources":["/root/codebase/tetris-in-react/tetris/src/utils/PlayerController.js"],"sourcesContent":["import { isWithinBoard, hasCollision } from \"./Board\";\r\nimport { rotate } from \"./Tetrominoes\";\r\nimport { Action } from \"./Input\";\r\n\r\nconst attemptRotation = ({ board, player, setPlayer }) => {\r\n  const shape = rotate({\r\n    piece: player.tetromino.shape,\r\n    direction: 1\r\n  });\r\n\r\n  const position = player.position;\r\n  const isValidRotation =\r\n    isWithinBoard({ board, position, shape }) &&\r\n    !hasCollision({ board, position, shape });\r\n\r\n  if (isValidRotation) {\r\n    setPlayer({\r\n      ...player,\r\n      tetromino: {\r\n        ...player.tetromino,\r\n        shape\r\n      }\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const movePlayer = ({ delta, position, shape, board }) => {\r\n  const desiredNextPosition = {\r\n    row: position.row + delta.row,\r\n    column: position.column + delta.column\r\n  };\r\n\r\n  const collided = hasCollision({\r\n    board,\r\n    position: desiredNextPosition,\r\n    shape\r\n  });\r\n\r\n  const isOnBoard = isWithinBoard({\r\n    board,\r\n    position: desiredNextPosition,\r\n    shape\r\n  });\r\n\r\n  const preventMove = !isOnBoard || (isOnBoard && collided);\r\n  const nextPosition = preventMove ? position : desiredNextPosition;\r\n\r\n  const isMovingDown = delta.row > 0;\r\n  const isHit = isMovingDown && (collided || !isOnBoard);\r\n\r\n  return { collided: isHit, nextPosition };\r\n};\r\n\r\nconst attemptMovement = ({ board, action, player, setPlayer, setGameOver }) => {\r\n  const delta = { row: 0, column: 0 };\r\n  let isFastDropping = false;\r\n\r\n  if (action === Action.FastDrop) {\r\n    isFastDropping = true;\r\n  } else if (action === Action.SlowDrop) {\r\n    delta.row += 1;\r\n  } else if (action === Action.Left) {\r\n    delta.column -= 1;\r\n  } else if (action === Action.Right) {\r\n    delta.column += 1;\r\n  }\r\n\r\n  const { collided, nextPosition } = movePlayer({\r\n    delta,\r\n    position: player.position,\r\n    shape: player.tetromino.shape,\r\n    board\r\n  });\r\n\r\n  const isGameOver = collided && player.position.row === 0;\r\n  if (isGameOver) {\r\n    setGameOver(isGameOver);\r\n  }\r\n\r\n  setPlayer({\r\n    ...player,\r\n    collided,\r\n    isFastDropping,\r\n    position: nextPosition\r\n  });\r\n};\r\n\r\nexport const playerController = ({\r\n  action,\r\n  board,\r\n  player,\r\n  setPlayer,\r\n  setGameOver\r\n}) => {\r\n  if (!action) return;\r\n  if (action === Action.Rotate) {\r\n    attemptRotation({ board, player, setPlayer });\r\n  } else {\r\n    attemptMovement({ board, player, setPlayer, action, setGameOver });\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
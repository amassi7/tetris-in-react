{"ast":null,"code":"import _slicedToArray from \"/root/codebase/tetris-in-react/tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nvar buildGameStats = function buildGameStats() {\n  return {\n    level: 1,\n    linesCompleted: 0,\n    linesPerLevel: 10,\n    points: 0\n  };\n};\nexport var useGameStats = function useGameStats() {\n  _s();\n  var _useState = useState(buildGameStats),\n    _useState2 = _slicedToArray(_useState, 2),\n    gameStats = _useState2[0],\n    setGameStats = _useState2[1];\n  var addLinesCleared = useCallback(function (lines) {\n    setGameStats(function (previous) {\n      var points = previous.points + lines * 100;\n      var linesPerLevel = previous.linesPerLevel;\n      var newLinesCompleted = previous.linesCompleted + lines;\n      var level = newLinesCompleted >= linesPerLevel ? previous.level + 1 : previous.level;\n      var linesCompleted = newLinesCompleted % linesPerLevel;\n      return {\n        level: level,\n        linesCompleted: linesCompleted,\n        linesPerLevel: linesPerLevel,\n        points: points\n      };\n    }, []);\n  }, []);\n  return [gameStats, addLinesCleared];\n};\n_s(useGameStats, \"9aYIx7oj+ExYyghjN+uQnVTeNBc=\");","map":{"version":3,"names":["useState","useCallback","buildGameStats","level","linesCompleted","linesPerLevel","points","useGameStats","_s","_useState","_useState2","_slicedToArray","gameStats","setGameStats","addLinesCleared","lines","previous","newLinesCompleted"],"sources":["/root/codebase/tetris-in-react/tetris/src/hooks/useGameStats.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nconst buildGameStats = () => ({\r\n  level: 1,\r\n  linesCompleted: 0,\r\n  linesPerLevel: 10,\r\n  points: 0\r\n});\r\n\r\nexport const useGameStats = () => {\r\n  const [gameStats, setGameStats] = useState(buildGameStats);\r\n\r\n  const addLinesCleared = useCallback((lines) => {\r\n    setGameStats((previous) => {\r\n      const points = previous.points + lines * 100;\r\n      const { linesPerLevel } = previous;\r\n      const newLinesCompleted = previous.linesCompleted + lines;\r\n      const level =\r\n        newLinesCompleted >= linesPerLevel\r\n          ? previous.level + 1\r\n          : previous.level;\r\n      const linesCompleted = newLinesCompleted % linesPerLevel;\r\n\r\n      return {\r\n        level,\r\n        linesCompleted,\r\n        linesPerLevel,\r\n        points\r\n      };\r\n    }, []);\r\n  }, []);\r\n\r\n  return [gameStats, addLinesCleared];\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA;EAAA,OAAU;IAC5BC,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE,CAAC;IACjBC,aAAa,EAAE,EAAE;IACjBC,MAAM,EAAE;EACV,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EAAAC,EAAA;EAChC,IAAAC,SAAA,GAAkCT,QAAQ,CAACE,cAAc,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnDG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9B,IAAMI,eAAe,GAAGb,WAAW,CAAC,UAACc,KAAK,EAAK;IAC7CF,YAAY,CAAC,UAACG,QAAQ,EAAK;MACzB,IAAMV,MAAM,GAAGU,QAAQ,CAACV,MAAM,GAAGS,KAAK,GAAG,GAAG;MAC5C,IAAQV,aAAa,GAAKW,QAAQ,CAA1BX,aAAa;MACrB,IAAMY,iBAAiB,GAAGD,QAAQ,CAACZ,cAAc,GAAGW,KAAK;MACzD,IAAMZ,KAAK,GACTc,iBAAiB,IAAIZ,aAAa,GAC9BW,QAAQ,CAACb,KAAK,GAAG,CAAC,GAClBa,QAAQ,CAACb,KAAK;MACpB,IAAMC,cAAc,GAAGa,iBAAiB,GAAGZ,aAAa;MAExD,OAAO;QACLF,KAAK,EAALA,KAAK;QACLC,cAAc,EAAdA,cAAc;QACdC,aAAa,EAAbA,aAAa;QACbC,MAAM,EAANA;MACF,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACM,SAAS,EAAEE,eAAe,CAAC;AACrC,CAAC;AAACN,EAAA,CAxBWD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}
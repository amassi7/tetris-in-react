{"ast":null,"code":"import _toConsumableArray from \"/root/codebase/tetris-in-react/tetris/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/root/codebase/tetris-in-react/tetris/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defaultCell } from \"./Cell\";\nimport { movePlayer } from \"./PlayerController\";\nimport { transferToBoard } from \"./Tetrominoes\";\nexport var buildBoard = function buildBoard(_ref) {\n  var rows = _ref.rows,\n    columns = _ref.columns;\n  var builtRows = Array.from({\n    length: rows\n  }, function () {\n    return Array.from({\n      length: columns\n    }, function () {\n      return _objectSpread({}, defaultCell);\n    });\n  });\n  return {\n    rows: builtRows,\n    size: {\n      rows: rows,\n      columns: columns\n    }\n  };\n};\nvar findDropPosition = function findDropPosition(_ref2) {\n  var board = _ref2.board,\n    position = _ref2.position,\n    shape = _ref2.shape;\n  var max = board.size.rows - position.row + 1;\n  var row = 0;\n  for (var i = 0; i < max; i++) {\n    var delta = {\n      row: i,\n      column: 0\n    };\n    var result = movePlayer({\n      delta: delta,\n      position: position,\n      shape: shape,\n      board: board\n    });\n    var collided = result.collided;\n    if (collided) {\n      break;\n    }\n    row = position.row + i;\n  }\n  return _objectSpread(_objectSpread({}, position), {}, {\n    row: row\n  });\n};\nexport var nextBoard = function nextBoard(_ref3) {\n  var board = _ref3.board,\n    player = _ref3.player,\n    resetPlayer = _ref3.resetPlayer,\n    addLinesCleared = _ref3.addLinesCleared;\n  var tetromino = player.tetromino,\n    position = player.position;\n  var rows = board.rows.map(function (row) {\n    return row.map(function (cell) {\n      return cell.occupied ? cell : _objectSpread({}, defaultCell);\n    });\n  });\n  var dropPosition = findDropPosition({\n    board: board,\n    position: position,\n    shape: tetromino.shape\n  });\n  var className = \"\".concat(tetromino.className, \" \").concat(player.isFastDropping ? \"\" : \"ghost\");\n  rows = transferToBoard({\n    className: className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows: rows,\n    shape: tetromino.shape\n  });\n  if (!player.isFastDropping) {\n    rows = transferToBoard({\n      className: tetromino.className,\n      isOccupied: player.collided,\n      position: position,\n      rows: rows,\n      shape: tetromino.shape\n    });\n  }\n  var blankRow = rows[0].map(function (_) {\n    return _objectSpread({}, defaultCell);\n  });\n  var linesCleared = 0;\n  rows = rows.reduce(function (acc, row) {\n    if (row.every(function (column) {\n      return column.occupied;\n    })) {\n      linesCleared++;\n      acc.unshift(_toConsumableArray(blankRow));\n    } else {\n      acc.push(row);\n    }\n    return acc;\n  }, []);\n  if (linesCleared > 0) {\n    addLinesCleared(linesCleared);\n  }\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n  return {\n    rows: rows,\n    size: _objectSpread({}, board.size)\n  };\n};\nexport var hasCollision = function hasCollision(_ref4) {\n  var board = _ref4.board,\n    position = _ref4.position,\n    shape = _ref4.shape;\n  for (var y = 0; y < shape.length; y++) {\n    var row = y + position.row;\n    for (var x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        var column = x + position.column;\n        if (board.rows[row] && board.rows[row][column] && board.rows[row][column].occupied) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\nexport var isWithinBoard = function isWithinBoard(_ref5) {\n  var board = _ref5.board,\n    position = _ref5.position,\n    shape = _ref5.shape;\n  for (var y = 0; y < shape.length; y++) {\n    var row = y + position.row;\n    for (var x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        var column = x + position.column;\n        var isValidPosition = board.rows[row] && board.rows[row][column];\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["defaultCell","movePlayer","transferToBoard","buildBoard","_ref","rows","columns","builtRows","Array","from","length","_objectSpread","size","findDropPosition","_ref2","board","position","shape","max","row","i","delta","column","result","collided","nextBoard","_ref3","player","resetPlayer","addLinesCleared","tetromino","map","cell","occupied","dropPosition","className","concat","isFastDropping","isOccupied","blankRow","_","linesCleared","reduce","acc","every","unshift","_toConsumableArray","push","hasCollision","_ref4","y","x","isWithinBoard","_ref5","isValidPosition"],"sources":["/root/codebase/tetris-in-react/tetris/src/utils/Board.js"],"sourcesContent":["import { defaultCell } from \"./Cell\";\r\nimport { movePlayer } from \"./PlayerController\";\r\nimport { transferToBoard } from \"./Tetrominoes\";\r\n\r\nexport const buildBoard = ({ rows, columns }) => {\r\n  const builtRows = Array.from({ length: rows }, () =>\r\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\r\n  );\r\n\r\n  return {\r\n    rows: builtRows,\r\n    size: { rows, columns }\r\n  };\r\n};\r\n\r\nconst findDropPosition = ({ board, position, shape }) => {\r\n  let max = board.size.rows - position.row + 1;\r\n  let row = 0;\r\n\r\n  for (let i = 0; i < max; i++) {\r\n    const delta = { row: i, column: 0 };\r\n    const result = movePlayer({ delta, position, shape, board });\r\n    const { collided } = result;\r\n\r\n    if (collided) {\r\n      break;\r\n    }\r\n\r\n    row = position.row + i;\r\n  }\r\n  return { ...position, row };\r\n};\r\n\r\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\r\n  const { tetromino, position } = player;\r\n\r\n  let rows = board.rows.map((row) =>\r\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\r\n  );\r\n\r\n  const dropPosition = findDropPosition({\r\n    board,\r\n    position,\r\n    shape: tetromino.shape\r\n  });\r\n\r\n  const className = `${tetromino.className} ${\r\n    player.isFastDropping ? \"\" : \"ghost\"\r\n  }`;\r\n  rows = transferToBoard({\r\n    className,\r\n    isOccupied: player.isFastDropping,\r\n    position: dropPosition,\r\n    rows,\r\n    shape: tetromino.shape\r\n  });\r\n\r\n  if (!player.isFastDropping) {\r\n    rows = transferToBoard({\r\n      className: tetromino.className,\r\n      isOccupied: player.collided,\r\n      position,\r\n      rows,\r\n      shape: tetromino.shape\r\n    });\r\n  }\r\n\r\n  const blankRow = rows[0].map((_) => ({ ...defaultCell }));\r\n  let linesCleared = 0;\r\n  rows = rows.reduce((acc, row) => {\r\n    if (row.every((column) => column.occupied)) {\r\n      linesCleared++;\r\n      acc.unshift([...blankRow]);\r\n    } else {\r\n      acc.push(row);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  if (linesCleared > 0) {\r\n    addLinesCleared(linesCleared);\r\n  }\r\n\r\n  if (player.collided || player.isFastDropping) {\r\n    resetPlayer();\r\n  }\r\n\r\n  return {\r\n    rows,\r\n    size: { ...board.size }\r\n  };\r\n};\r\n\r\nexport const hasCollision = ({ board, position, shape }) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    const row = y + position.row;\r\n\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const column = x + position.column;\r\n\r\n        if (\r\n          board.rows[row] &&\r\n          board.rows[row][column] &&\r\n          board.rows[row][column].occupied\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isWithinBoard = ({ board, position, shape }) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    const row = y + position.row;\r\n\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const column = x + position.column;\r\n        const isValidPosition = board.rows[row] && board.rows[row][column];\r\n\r\n        if (!isValidPosition) return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}